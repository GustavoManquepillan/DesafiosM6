Descripcion General del Sitio WEB:

EL Proyecto Onlyflans se basa en la creación de un proyecto de django para
la creación de una página web, en donde se quiere dar a conocer una tienda de flanes 
llamada "OnlyFlans". Este nuevo emprendimiento debe paracer una tienda seria y llamativa 
para los clientes para así posicionarce dentro del mercado.

En este proyecto se crea un entorno virtual que se basa en Templates para la cracion de una aplicación web. 
Para OnlyFlans se utiliza una plantilla (template) llamada "base.html", la que se encarga de maquetear la base de
como queremos que se vea la página web, esta interactua con el archivo "Views.py" la que se encarga de generar las vistas 
que usaremos  a través de los templates o plantillas, como también se utiliza "Urls.py" para settear las rutas a las que accederemos. 


Caracteristicas Base:

Este proyecto tiene un archivo "base.html" que se divide en 4 bloques: Header, Navbar, Content, Footer; y se utiliza para
dar forma a las Vistas que creamos en "views.py". 

"""
{% block header %} 
{% include 'header.html' %}
{% endblock header %}

{% block navbar %} 
{% include 'navbar.html' %}
{% endblock navbar %}
    
{% block content %}  
{% include 'Contacto.html' %} 
{% endblock content %}

{% block footer %}  
{% include 'footer.html' %}
{% endblock footer %}
"""

Para esto igual es necesario crear las plantillas "navbar.html", "header.html", "contacto.html" y "footer.html".
También aquí se integra Bootstrap 5.0.2, jquery 3.6.0 y Styles CCS.

____________________________________________________________________________________________________________________________________________________________________________________________________________

En este proyecto creamos 4 vistas pricipales  en el archivo "views.py", las cuales son: Inicio, Bienvenido, Acerca, Contacto.
Adicionalmente agregamos una plantilla "exito.html", la que se abre en la vista "exito" en "views.py". 

Para las vistas Inicio y Bienvenido  en los archivos "index.html" y "welcome.html"creamos tarjetas de Boostrap que muestran una imagen y una 
descripción para los diferentes Flanes cargadas desde el modelo "Flan" en "models.py", además de un botón que lleva a la receta correspondiente a cada Flan: 

"""
<div class="card" style="width: 18rem; margin: 20px;">
	<img src="{{ flan.image_url }}" class="card-img-top flan-img mt-2" alt="{{ flan.name }}">
        <div class="card-body">
            <h5 class="card-title flan-title text-center" style="font-size: 20px; margin-bottom: 10px;">{{ flan.name }}</h5>
            <p class="card-text flan-description text-justify" style="font-size: 16px; text-align: center;">{{ flan.description }}</p>
        </div>
        <div class="text-center">
            <a href="{% url 'detalle_receta' flan.slug %}" class="btn btn-primary btn-sm mb-3">Ver Receta</a> <!-- Agregamos clases para hacerlo más pequeño -->
        </div>
</div>
"""
_____________________________________________________________________________________________________________________________________________________________________________________________________________
En la plantilla "contacto.html" tenemos un formulario de contacto. Este formulario se crea en "forms.py" y se importa desde "models.py", la cual se muestra en
la vista "contacto".

FORMS:

"""
from django import forms
from django.forms import ModelForm
from .models import ContactForm

class ContactFormForm(forms.Form):
    customer_name = forms.CharField(max_length=64, label='Nombre')
    customer_email = forms.EmailField(label='Email')
    message = forms.CharField(label='Mensaje')

class ContactFormModelForm(ModelForm):
    class Meta:
        model = ContactForm
        fields = ['customer_name', 'customer_email', 'message']
        labels = {
            'customer_name': 'Nombre',
            'customer_email': 'Email',
            'message': 'Mensaje',
        }
"""


MODELS:

"""
class ContactForm(models.Model):
    contact_form_uuid = models.UUIDField(default=uuid.uuid4, editable=False)
    customer_name = models.CharField(max_length=64)
    customer_email = models.EmailField()
    message = models.TextField()

    def __str__(self):
        return f"{self.customer_email} - Mensaje: {self.message}"
"""
_____________________________________________________________________________________________________________________________________________________________________________________________________________

En las plantillas "index.html", "welcome.html", "detalle_receta.html" y "contacto.html" se usaron estilos CSS directamente en las plantillas.
 
También usamos una vista llamada "MiVIstaProtegida" para que en la vista "Bienvenido" podamos usar el decorador "@login_required" y asi poder 
usar autenticacion de usuario.
Ademas en "welcome.html" que usa la vista Bienvenido, tendremos los Flanes Privados que se mostraran solo si el usuario es autenticado.

Se agregaron características  adicionales a la descripcion de las tarjetas, haciendo que desaparezca o aparezca cuando hacemos clic en el 
Título dea clada flan con el siguiente Script:

"""
<script>

    $(document).ready(function() {
        $('.flan-title').click(function() {
        // Alternar la visibilidad de todos los elementos con la clase 'flan-description'
        $('.flan-description').slideToggle();
        });
    });

</script>
"""

En la vista Bienvenido se agregó una sección  de clase "alert alert-success" que muestra un mensaje de bienvenida al usuario y un mensaje que 
avisa que la autenticación fue exitosa, este último desaparece tras 5 segundos gracias a un script de "JavaScript" cargado directamente en la 
plantilla "welcome.html":

"""
<script>

// Seleccionar el elemento del párrafo por su ID
    var successMessage = document.getElementById("success-message");
    
// Establecer un temporizador para ocultar el mensaje después de 5 segundos (5000 milisegundos)
    setTimeout(function() {
        successMessage.style.display = "none"; // Ocultar el elemento
    }, 5000); // 5000 milisegundos = 5 segundos 

</script>
"""
_______________________________________________________________________________________________________________________________________________________________________________________________________________

También se agragaron recetas a cada Flan a traves del siguiente modelo "Flan", que se ven en la vista "detalle_receta", la cual llama a la plantilla "detalle_receta.html":

MODELO:
class Flan(models.Model):
    flan_uuid = models.UUIDField(default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=64)
    description = models.TextField()
    ingredients = models.TextField()  # Campo para los ingredientes
    ingredients_description = models.TextField() 
    preparation = models.TextField()  # Campo para la preparación
    preparation_description = models.TextField()
    image_url = models.URLField()
    slug = models.SlugField()
    is_private = models.BooleanField()

    def __str__(self):
        return self.name


VISTA:

def detalle_receta(request, nombre):
    # Lógica para obtener los detalles de la receta con el nombre proporcionado
    # Utiliza el nombre de la receta para obtener los detalles necesarios
    # Por ejemplo:
    try:
        flan = Flan.objects.get(slug=nombre)
        # Ahora puedes usar 'flan' para obtener los detalles de la receta
        return render(request, 'detalle_receta.html', {'flan': flan})
    except Flan.DoesNotExist:
        # Maneja el caso donde la receta no existe
        return HttpResponseNotFound("La receta no existe")


PLANTILLA HTML:

{% extends 'base.html' %}

{% block title %} Recetas de OnlyFlans {% endblock title %}

{% block content %}
<div class="container pt-3 pb-4" style="background-color: #eeeff4;">
    <h1 class="text-center mb-4">Recetas de OnlyFlans</h1>

    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mb-3 ">
                <img src="{{ flan.image_url }}" class="card-img-top flan-img mt-2" alt="{{ flan.name }}">
                <div class="card-body">
                    <h2 class="card-title text-center">{{ flan.name }}</h2>
                    
                    <p class="card-title text-center">{{ flan.description }} </p>
                    <hr>
                    <h4 class="card-title text-center">{{ flan.ingredients }} </h4>
                    <p class="card-title text-center">{{ flan.ingredients_description }} </p>
                    <hr>
                    <h4 class="card-title text-center">{{ flan.preparation }} </h4>
                    <p class="card-title text-center">{{ flan.preparation_description }} </p>
                    
                    <div class="text-center">
                        {% if flan.is_private %}
                            <a href="{% url 'bienvenido' %}" class="btn btn-primary">Volver</a>
                        {% else %}
                            <a href="{% url 'indice' %}" class="btn btn-primary">Volver</a>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}



______________________________________________________________________________________________________________________________________________________________________________________________________________________________________



Los principales problemas al desarrollar el sitio web base fueron los errores de tipeo o fallas en cuanto a los nombres de las clases, urls, etc, ya que una solo cáracter
mal escrito puede resultar en un error e impedir el funcionamiento del mismo, me costó tambien entender la logica de django al principio ya que tenia problemas con los modelos  y  vistas.
En general creo que para alguien nuevo en esto es complejo debido a que tiene que ser todo bien estructurado, y tambien hay que ir revisando paso a páso lo que hacemos y si ocurre un error buscar soluciones,
las que veces pueden ser muy obvias, pero alguien que recien interactúa con el entorno virtual puede que le cueste más. Ee mi caso me costó bastante hacer funcionar todo, y me tomó tiempo lograr el resultado que queria 
principalmente porque tuve un error en la hito 2 que no me dejó avanzar en el Hito 3 y me retrasé y tuve que volver a comenzar desde el principio.


La parte de las características personalizadas no me dio tanto problema, ya que en HTML logré aprender lo suficiente para poder abordar eso con más calma y sabiendo mejor que hacer.
De igual forma a veces costaba dejar todo en donde uno quería, pero probando se logró el resultado esperado.

En fin, me pareció un Proyecto un poco complicado, pero creo que django es una herramienta muy buena para la creacion de aplicaciones web ya que podemos tener el proyceto mas ordenado, se puede utilizar modelos que se pueden usar 
en varias instancias y eso ayuda que no tengamos que estar escribiendo tanto código.




ESTE HA SIDO MI RESUMEN, ESPERO LO PUEDAN ENTENDER!





   